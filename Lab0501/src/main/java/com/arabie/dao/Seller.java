package com.arabie.dao;// default package
// Generated Mar 20, 2021, 2:22:48 PM by Hibernate Tools 6.0.0.Alpha2


import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;
import javax.persistence.Entity;
import javax.persistence.Table;

import org.hibernate.annotations.*;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Parameter;

/**
 * Seller generated by hbm2java
 */
@Entity
@Table(name = "seller"
        , catalog = "biddingschema")
//2nd level cache collection
@Cacheable
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class Seller implements java.io.Serializable {


    private int id;
    private User user;
    private String value;
    //2nd level cache collection
//    @Cacheable
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    private Set<Product> products = new HashSet<Product>(0);

    public Seller() {
    }


    public Seller(User user, String value) {
        this.user = user;
        this.value = value;
    }

    public Seller(User user, String value, Set<Product> products) {
        this.user = user;
        this.value = value;
        this.products = products;
    }

    @GenericGenerator(name = "SellerIdGenerator", strategy = "foreign", parameters = @Parameter(name = "property", value = "user"))
    @Id
    @GeneratedValue(generator = "SellerIdGenerator")


    @Column(name = "id", unique = true, nullable = false)
    public int getId() {
        return this.id;
    }

    public void setId(int id) {
        this.id = id;
    }

    //    @OneToOne(fetch = FetchType.EAGER)
    @OneToOne(fetch = FetchType.LAZY)
    @PrimaryKeyJoinColumn
    public User getUser() {
        return this.user;
    }

    public void setUser(User user) {
        this.user = user;
    }


    @Column(name = "value", nullable = false, length = 100)
    public String getValue() {
        return this.value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    //    @OneToMany(fetch=FetchType.EAGER, mappedBy="seller")
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "seller")
//    @OneToMany(mappedBy = "seller") //for batch size
//    @BatchSize(size = 2)
//    @Fetch(FetchMode.SUBSELECT)
//    @Fetch(FetchMode.SELECT)
    @Fetch(FetchMode.JOIN)

    public Set<Product> getProducts() {
        return this.products;
    }

    public void setProducts(Set<Product> products) {
        this.products = products;
    }


    @Override
    public String toString() {
        return "Seller{" +
                "id=" + id +
                ", user=" + user +
                ", value='" + value + '\'' +
                ", products=" + products +
                '}';
    }
}


